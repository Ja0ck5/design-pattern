package com.ja0ck5.dp.decorator;

/**
 * Decorator 模式
 * 装饰边框与被装饰物的一致性
 * 通过添加装饰物来增加对象的功能
 * <p>
 * 不修改被装饰的类就可以增加功能
 * 1. 在不改变装饰物的前提下增加功能
 * 使用了 委托。对 装饰边框 提出的要求(调用装饰边框的方法) 会被转交(委托)给 被装饰物 去处理
 * <p>
 * 2. 可以动态地增加功能
 * Decorator 模式中使用了委托. 使类之间形成了 弱关联 关系。 因此，不用改变框架代码，就可以生成一个
 * 与其他对象具有不同关系的新对象
 * <p>
 * 3. 只需要一些装饰物就可以添加许多功能
 * <p>
 * 缺点： 导致程序中增加许多功能类似的很小的类
 */
public abstract class Decorator {
}
